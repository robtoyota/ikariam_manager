from pg import Pg


class Resource:
	def __init__(self, name, amount=None, production=None, usage=None):
		self.name = name

	@staticmethod
	def install_tables(db: Pg) -> None:
		with db.cursor() as cur:
			# Base resource table
			cur.execute("""
				create table if not exists resource
				(
					id int generated by default as identity,
					user_id int,
					city_id int,
					resource_type varchar(1),  -- L/M/W/C/S
					inserted_on timestamp
				);
			""")

			# Resource amounts in each city
			cur.execute("""
				create table if not exists resource_amount
				(
					id int generated by default as identity,
					resource_id int not null unique,
					amount int not null,
					updated_on timestamp default now()
				);
			""")

			# Resource production in each city
			cur.execute("""
				create table if not exists resource_production
				(
					id int generated by default as identity,
					resource_id int not null unique,
					amount int not null,
					updated_on timestamp default now()
				);
			""")

			# Resource usage in each city
			cur.execute("""
				create table if not exists resource_usage
				(
					id int generated by default as identity,
					resource_id int not null unique,
					amount int not null,
					updated_on timestamp default now()
				);
			""")

			# Resource maximums in each city
			cur.execute("""
				create table if not exists resource_maximum
				(
					id int generated by default as identity,
					resource_id int not null unique,
					amount int not null,
					updated_on timestamp default now()
				);
			""")

			# Resource target maximums in each city
			cur.execute("""
				create table if not exists resource_target_maximum
				(
					id int generated by default as identity,
					resource_id int not null unique,
					amount int not null,
					updated_on timestamp default now()
				);
			""")

			# Resource target minimums in each city
			cur.execute("""
				create table if not exists resource_target_minimum
				(
					id int generated by default as identity,
					resource_id int not null unique,
					amount int not null,
					updated_on timestamp default now()
				);
			""")

			# Resource target amount in each city
			cur.execute("""
				create table if not exists resource_target_amount
				(
					id int generated by default as identity,
					resource_id int not null unique,
					amount int not null,
					updated_on timestamp default now()
				);
			""")



	@staticmethod
	def install_indexes(db: Pg) -> None:
		with db.cursor() as cur:
			# Base resource table
			cur.execute("""
				create index if not exists resouce_city_id on resource(city_id);
				create index if not exists resouce_user_id on resource(user_id);

				create index if not exists resource_amount_resource_id on resource_amount(resource_id);
				create index if not exists resource_production_resource_id on resource_production(resource_id);
				create index if not exists resource_usage_resource_id on resource_usage(resource_id);
				create index if not exists resource_maximum_resource_id on resource_maximum(resource_id);
				create index if not exists resource_target_maximum_resource_id on resource_target_maximum(resource_id);
				create index if not exists resource_target_minimum_resource_id on resource_target_minimum(resource_id);
				create index if not exists resource_target_amount_resource_id on resource_target_amount(resource_id);
			""")

	@staticmethod
	def install_pg_functions(db: Pg) -> None:
		with db.cursor() as cur:
			pass  # cur.execute()
