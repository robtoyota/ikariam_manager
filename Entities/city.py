from pg import Pg


class City:
	@staticmethod
	def add_city(db: Pg, x: int, y: int, name: str, user_id: int) -> int:
		# Insert the new user
		with db.cursor() as cur:
			cur.execute(
				"insert into username (username, server) values (%s, %s) on conflict do nothing returning id",
				(username, server)
			)

			# Get the ID of the user
			if cur.rowcount > 0:
				row = cur.fetchone()
				return row['id']
			else:  # If no ID was returned
				# Does the user already exist? Try get the ID:
				cur.execute("select id from username where username=%s and server=%s", (username, server))
				row = cur.fetchone()
				if row['id'] > 0:
					return row['id']
				else:
					return -1

	@staticmethod
	def install_tables(db: Pg) -> None:
		with db.cursor() as cur:
			cur.execute("""
				create table if not exists city
				(
					id int generated by default as identity,
					user_id int not null,
					x int not null,
					y int not null,
					city_name text null,
					city_level int null,
					list_order int null,
					population int null,
					max_population int null,
					satisfaction int null,
					action_points_available int null,
					inserted_on timestamp default now(),
					updated_on timestamp default now(),
					unique(user_id, x, y, city_name)
				);
			""")

	@staticmethod
	def install_indexes(db: Pg) -> None:
		with db.cursor() as cur:
			cur.execute("""
				create index if not exists city_x on city(x);
				create index if not exists city_y on city(y);
				create index if not exists city_city_name on city(city_name);
				create index if not exists city_list_order on city(list_order);
			""")

	@staticmethod
	def install_pg_functions(db: Pg) -> None:
		with db.cursor() as cur:
			pass  # cur.execute()
